/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

#import "AppDelegate.h"

#import "RCTRootView.h"
@interface AppDelegate ()

@property (nonatomic, strong) CLLocationManager *locationManager;

@end

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
  NSURL *jsCodeLocation;

  /**
   * Loading JavaScript code - uncomment the one you want.
   *
   * OPTION 1
   * Load from development server. Start the server from the repository root:
   *
   * $ npm start
   *
   * To run on device, change `localhost` to the IP address of your computer
   * (you can get this by typing `ifconfig` into the terminal and selecting the
   * `inet` value under `en0:`) and make sure your computer and iOS device are
   * on the same Wi-Fi network.
   */

  jsCodeLocation = [NSURL URLWithString:@"http://192.168.3.111:8081/index.ios.bundle?platform=ios&dev=true"];

  if([launchOptions objectForKey:@"UIApplicationLaunchOptionsLocationKey"]){
    
  }

  [self startMonitoringRegion:[[CLBeaconRegion alloc] initWithProximityUUID:[[NSUUID alloc] initWithUUIDString:@"C5893190-8A93-42EE-975B-F20080DD982B"] identifier: @"jaalee"]];
  
  
  [self.locationManager startMonitoringSignificantLocationChanges];
  /**
   * OPTION 2
   * Load from pre-bundled file on disk. The static bundle is automatically
   * generated by "Bundle React Native code and images" build step.
   */

//   jsCodeLocation = [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];

  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation
                                                      moduleName:@"c2cble"
                                               initialProperties:nil
                                                   launchOptions:launchOptions];

  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
  UIViewController *rootViewController = [UIViewController new];
  rootViewController.view = rootView;
  self.window.rootViewController = rootViewController;
  [self.window makeKeyAndVisible];
  return YES;
}



#pragma mark - Getters

- (CLLocationManager *)locationManager {
  if (!_locationManager) {
    _locationManager = [CLLocationManager new];
    _locationManager.delegate = self;
  }
  return _locationManager;
}


#pragma mark - Add/Remove Beacons

- (void)startMonitoringRegion:(CLBeaconRegion *)region {
  [self.locationManager startMonitoringForRegion:region];
  [self.locationManager startRangingBeaconsInRegion:region];
}

- (void)stopMonitoringRegion:(CLBeaconRegion *)region {
  [self.locationManager stopMonitoringForRegion:region];
  [self.locationManager stopRangingBeaconsInRegion:region];
}


#pragma mark - CLLocationManagerDelegate

- (void)locationManager:(CLLocationManager *)manager didRangeBeacons:(NSArray *)beacons inRegion:(CLBeaconRegion *)region {
  for (CLBeacon *beacon in beacons) {
    [[NSNotificationCenter defaultCenter]
      postNotificationName:@"TestNotification"
        object:self];
  }
}

- (void)locationManager:(CLLocationManager *)manager didEnterRegion:(CLRegion *)region {
  if ([region isKindOfClass:[CLBeaconRegion class]]) {
    [self sendRequestWithRegion:(CLBeaconRegion *)region andAction:@"enter"];
    UILocalNotification *localNotification = [UILocalNotification new];
    localNotification.alertBody = [NSString stringWithFormat:@"Did enter region: %@", region.identifier];
    [[UIApplication sharedApplication] scheduleLocalNotification:localNotification];
  }
}

- (void)locationManager:(CLLocationManager *)manager didExitRegion:(CLRegion *)region {
  if ([region isKindOfClass:[CLBeaconRegion class]]) {
    [self sendRequestWithRegion:(CLBeaconRegion *)region andAction:@"exit"];
    UILocalNotification *localNotification = [UILocalNotification new];
    localNotification.alertBody = [NSString stringWithFormat:@"Did exit region: %@", region.identifier];
    [[UIApplication sharedApplication] scheduleLocalNotification:localNotification];
  }
}


#pragma mark - Networking

- (void)sendRequestWithRegion:(CLBeaconRegion *)region andAction:(NSString *)action {
  
  CLLocationCoordinate2D coords = [[[self locationManager] location] coordinate];
  NSString *lat = [[NSNumber numberWithFloat:coords.latitude] stringValue];
  NSString *lng = [[NSNumber numberWithFloat:coords.longitude] stringValue];
  
  
  NSString *requestString = [[NSString stringWithFormat:@"http://192.168.3.111:3000/event?userId=testUser&deviceId=testDevice&regionId=%@&regionName=%@&action=%@&timestamp=%@&lat=%@&lng=%@", region.proximityUUID.UUIDString, region.identifier, action, [NSDate date], lat, lng] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
  
  NSURL *requestUrl = [NSURL URLWithString:requestString];
  
  NSURLRequest *request = [NSURLRequest requestWithURL:requestUrl];
  [NSURLConnection sendAsynchronousRequest:request
                                     queue:[NSOperationQueue mainQueue]
                         completionHandler:^(NSURLResponse *response, NSData *data, NSError *connectionError) {
                           if (connectionError) {
                             NSLog(@"Server request finished with error: %@", connectionError.localizedDescription);
                           }
                         }];
}




@end
